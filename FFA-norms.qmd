---
title: "FFA-Norm values analyses"
subtitle: "Based on the 2009 Paper by Kohls, Sauer and Walach"
author: "Sebastian Sauer"
date: now
format:
  html:
    toc: true
    number-sections: true
    standalone: true 
    code-fold: true
    df-print: kable
    #code_folding: hide
  # pdf:
  #   toc: true
  #   number_sections: true
  #   extra_dependencies: ["float"]
  # typst:
  #   toc: true
  #   number_sections: true
  # docx:
  #   toc: true
editor_options:
  chunk_output_type: console
execute:
  cache: true
---





# Summary


- This analyses comprises (a) descriptive (summary) statistics as well as (b) norm values

- All analyses were based on the FMI13 as presented in Kohls, Sauer and Walach (2009): 

>   Kohls, N., Sauer, S., & Walach, H. (2009). Facets of mindfulness – Results of an online study investigating the Freiburg mindfulness inventory. *Personality and Individual Differences, 46*(2), 224–230. https://doi.org/10.1016/j.paid.2008.10.009
 

- Results are presented  for (a) a general factor solution (b) and for the two factor solution, based on the paper of Kohls, Sauer and Walach (2009)

- The present norm analyses includes the following norm values: z-values, T values, percentage rank empirical, percentage rank based on a normal distribution

- For the descriptive analyses, typical statistics are reproted, ie. mean, sd, range, quartiles, skewness, kurtosis as well as a "0-1-standardized mean", defined as mean/3 (as 3 is the theoretical upper limit of each score). This statistics is meant to easy comparison.

- A number of subgroup results are presented: by sex (female and male), continuous mindfulness training (yes or no), whether intensive mindfulnes retreats have been conducted (yes or noy), whether Vipassana training is practiced (yes or no), age (median split, ie., 49 years)




# Setup

Load R-Packages and other functions used.

```{r libs, message=FALSE}
library(easystats)
library(here)
library(tidyverse)
#library(knitr)
library(DataExplorer)
#library(scales)
library(knitr)
library(gt)
library(magrittr)  # extract2
library(lavaan)
library(semPlot)
library(psych)

```



```{r source-funs}
source("R-code/funs.R")
source("R-code/01-prepare-data.R")
```






```{r global-knitr-options, include=FALSE}
  knitr::opts_chunk$set(
  fig.pos = 'H',
  fig.asp = 0.618,
  fig.align='center',
  fig.width = 8,
  out.width = "100%",
  fig.cap = "", 
  fig.path = "chunk-img/",
  dpi = 300,
  # tidy = TRUE,
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = TRUE)

options(knitr.kable.NA = "")
```



```{r include=FALSE}
theme_set(theme_minimal())
```


# Data


## Prepare data

```{r prepare-data}
d_w_items <- prepare_FMI_data()
names(d_w_items)
```




## Item labels

```{r item-labels}
item_labels <- 
  read_csv("metadata/FMI-items.csv") |> 
  mutate(item_name = paste0("FFA_", nr))
```


## Matching items to factors

Presence items:

```{r}
item_labels |> 
  filter(facet_PAID_2009 == "Presence") |> 
  select(nr) |> 
  extract2(1)
```


Acceptance items:

```{r}
item_labels |> 
  filter(facet_PAID_2009 == "Acceptance") |> 
  select(nr)|> 
  extract2(1)
```


# Describe factors




## Visualization of factor distributions


```{r plot-distribs}
d_w_items %>% 
  select(ends_with("_mean")) %>% 
  plot_density() + theme_minimal()
```

Alternative visualization, 
keeping the x-axis constant:

```{r fmi-density-plots}
facet_labs <- c(acceptance13_mean = "Acceptance",
                fmi13_mean = "FMI-13R",
                fmi14_mean = "FMI-14",
                presence_mean = "Presence")
  

d_w_items %>% 
  select(ends_with("_mean")) %>% 
  pivot_longer(everything()) %>% 
  ggplot(aes(x = value)) +
  geom_density() +
  facet_wrap(~ name, labeller = as_labeller(facet_labs)) +
  theme_minimal() +
  theme(strip.text = element_text(size = 14),
                axis.text = element_text(size =14),
        axis.ticks.y = element_blank()) +
  labs(y = "",
       x = "mean score") +
  scale_y_continuous(breaks = NULL)

```





## Descriptive statistics

"Mean01" refers to a 0-1-standardized mean.

```{r describe-distribs, results="asis"}
desc_stats_df <- 
d_w_items %>% 
  select(ends_with("_mean")) %>% 
  describe_distribution(iqr = FALSE, range = TRUE, quartiles = TRUE) %>% 
  mutate(Mean01 = Mean/3) %>% 
  mutate(Model = c("FMI-13R", "Presence", "Acceptance", "FMI-14")) |> 
  relocate(Mean01, .after = Mean) %>% 
  relocate(Model, .before = everything()) |> 
  select(-Variable, -n_Missing)
  
desc_stats_df |> 
  knitr::kable(digits = 2)
```





# Norms overall (no subgroups)


## Mean to norms

```{r norms-overall, results = "asis"}

col_names <- c("Mean", "Percent (empirical)", "z", "Stanine", "T", "Percent (normal)")

norms_list <- 
d_w_items %>% 
  select(ends_with("_mean")) %>% 
  map(~ compute_all_norms(., min_score = 0, max_score = 3, by = .1))
  
norms_list |> 
  map(~ knitr::kable(., 
                     digits = 2, col.names = col_names))

```


## Stanine to means

```{r stanine-to-mean}
# Z-score boundaries between stanine bands (8 boundaries for 9 bands)

dist_df <-
  desc_stats_df |> select(Model, Mean, SD)

z_boundaries <- c(-1.75, -1.25, -0.75, -0.25, 0.25, 0.75, 1.25, 1.75)


compute_stanine_ranges <- function(Model, Mean, SD) {
  raw_bounds <- z_boundaries * SD + Mean
  data.frame(
    Model = Model,
    Stanine = 1:9,
    Lower_Bound = c(-Inf, raw_bounds),
    Upper_Bound = c(raw_bounds, Inf)
  )
}

# Apply to all models
stanine_table <- pmap_dfr(dist_df, compute_stanine_ranges) |> 
  rownames_to_column()
  
rownames(stanine_table) <- NULL
```


```{r print-norms, results = "asis"}
# results: asis


# Print the result using kable for nicer formatting


col_names <- c("Stanine", "Lower Bound Mean Score", "Upper Bound Mean Score")

stanine_table %>%
  split(.$Model) %>%
  walk(~{
    cat("\n\n### Stanine Table for", unique(.$Model), "\n\n")
    print(kable(select(., -c(Model, rowname)), digits = 1, 
                row.names = FALSE,
                col.names = col_names))
  })

```




## Plot mean to norms

```{r plot-norms}
norms <-
d_w_items %>% 
  select(ends_with("_mean")) %>% 
  map(~ compute_all_norms(., 
                          min_score = 0, 
                          max_score = 3, 
                          by = .1), 
      digits = 2)


p_norm1 <- 
norms %>% 
  pluck(1) %>%
  ggplot(aes(x = score, y = z)) +
  geom_line() +
  scale_y_continuous(breaks = c(-2, 0, 2)) +
  theme(strip.text = element_text(size = 14),
                axis.text = element_text(size =14))


p_norm2 <-
norms %>% 
  pluck(1) %>%
  ggplot(aes(x = score, y = stanine)) +
  geom_line() + 
  scale_y_continuous(breaks = c(1, 5, 9)) +
  theme(strip.text = element_text(size = 14),
                axis.text = element_text(size =14))


p_norm3 <-
norms %>% 
  pluck(1) %>%
  ggplot(aes(x = score, y = perc_rank)) +
  geom_line() +
  labs(y = "Percentage")  +
  scale_y_continuous(breaks = c(0, .5, 1),
                     
                     labels = c("0%", "50%", "100%")) +
  theme(strip.text = element_text(size = 14),
                axis.text = element_text(size =14))


see::plots(p_norm1, p_norm2, p_norm3, tags = TRUE,
           n_rows = 3)
  
# 
# see::plots(p_norm1, p_norm2, p_norm3, tags = TRUE,
#            n_rows = 3,
#            title =  "FMI-13R mean value (x-axis) vs. different norm values (y-axis)")
```



# Item statistics and reliability

Sample size:

```{r sample-size}
d_w_items |> 
  select(starts_with("ffa_")) |> 
  drop_na() |> 
  nrow()
```


## FMI14



Alpha:

```{r fmi14-alpha}
fmi14_alpha <- 
d_w_items |> 
  select(starts_with("ffa_", ignore.case = FALSE)) |> 
  psych::alpha()

fmi14_alpha

fmi14_alpha[["item.stats"]] |> str()
```


Item statistics:

```{r fmi14-stats}
fmi14_desc1 <- 
d_w_items |> 
  select(starts_with("ffa_", ignore.case = FALSE)) |> 
  psych::alpha()

col_names <- c("Nr.", "mean", "*SD*", "*r<sub>it</sub>*", "*r<sub>it</sub> dropped*")

fmi14_desc1[["item.stats"]] |> 
  mutate(nr = 1:14) |> 
  select(nr, mean, sd, r.cor, r.drop) |> 
    kable(col.names = col_names, escape = FALSE, digits = 2, row.names = FALSE)
```


Omega:

```{r fmi14-omega}
fmi14_omega <- 
d_w_items |> 
  select(starts_with("ffa_", ignore.case = FALSE)) |> 
  psych::omega(nfactors = 1)

fmi14_omega
```


## FMI13-R

Sample size:

```{r sample-size-fm13}
d_w_items |> 
  select(starts_with("ffa_", ignore.case = FALSE)) |> 
  select(-ffa_13r) |> 
  drop_na() |> 
  nrow()
```

Items stats:

```{r fmi13r-stats}
fmi13_desc1 <- 
d_w_items |> 
  select(starts_with("ffa_", ignore.case = FALSE)) |> 
  select(-ffa_13r) |> 
  psych::alpha()

col_names <- c("Nr.", "mean", "*SD*", "*r<sub>it</sub>*", "*r<sub>it</sub> dropped*")

fmi13_desc1[["item.stats"]] |> 
  mutate(nr = c(1:12, 14)) |> 
  select(nr, mean, sd, r.cor, r.drop) |> 
    kable(col.names = col_names, escape = FALSE, digits = 2, row.names = FALSE)
```


Omega:

```{r fmi13-omega}
fmi13_omega <- 
d_w_items |> 
  select(starts_with("ffa_", ignore.case = FALSE)) |> 
  select(-ffa_13r) |> 
  psych::omega(nfactors = 1)

fmi13_omega
```






# CFA




rename the items for the sake of brevity:
 
```{r cfa-rename}
fmi_items <- 
 d_w_items %>%
  select(starts_with("ffa"), mindfulness_experience) |> 
  rename_with(~ gsub("^ffa_(\\d+[a-zA-Z]?)$", "i\\1", .), 
              starts_with("ffa_"))
```





## Setup

```{r cfa-setup}
cfa_results <- list()

get_results_list <- function(cfa_model, model_name) {
  out <- list()
  
  out <- list(
    obj_name = deparse(substitute(cfa_model)),
    model_name = model_name,
   # overview = list(summary(cfa_model)),
    cfi = fitMeasures(cfa_model)["cfi"],
    tli = fitMeasures(cfa_model)["tli"],
    rmsea = fitMeasures(cfa_model)["rmsea"],
    srmr = fitMeasures(cfa_model)["srmr"],
    chisq = fitMeasures(cfa_model)["chisq"],
    df = fitMeasures(cfa_model)["df"],
   pvalue = fitMeasures(cfa_model)["pvalue"]
  )
  
  return(out)
}
```



### Tetrachoric correlation matrix


```{r polychoric}
polychoric_r <- polychoric(fmi_items |> select(-mindfulness_experience))

polychoric_rho <- polychoric_r$rho

polychoric_rho[lower.tri(polychoric_r$rho, diag = FALSE)] <- NA

polychoric_rho |> kable( digits = 2)
```




## One general mindfulness factor, including item 13



```{r def-modle-one-dim}
FMI14 <- 
  "General_Factor=~i1+i2+i3+i4+i5+i6+i7+i8+i9+i10+i11+i12+i13r+i14"
```




### items as numerical

```{r one_factor_numeric}
one_factor_numeric <- cfa(FMI14, data = fmi_items)

  cfa_results[["FMI-14, numeric"]] <- 
  get_results_list(one_factor_numeric,
                   model_name = "FMI-14, numeric")
```




### items as categorical, Pearson

```{r one_factor_ordered_pearson}
one_factor_ordered_pearson <- 
  cfa(FMI14, 
      data = fmi_items,
      estimator = "WLSMV",
      ordered = TRUE)

cfa_results[["FMI-14, ordered, Pearson"]] <- 
  get_results_list(one_factor_ordered_pearson,
                   model_name = "FMI-14, ordered, Pearson")
  
```


### items as categorical, Polychoric

```{r one_factor_ordered_polychoric}
one_factor_ordered_polychoric <- 
  cfa(FMI14, 
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE)

cfa_results[["FMI-14, ordered, polychoric"]] <- 
  get_results_list(one_factor_ordered_polychoric,
                   model_name = "FMI-14, ordered, polychoric")
  
```





### items as categorical, Polychoric, mindfulness practitioners only

```{r one_factor_ordered_polychoric_practitioners}
one_factor_ordered_polychoric_practitioners <- cfa(FMI14, 
                                     data = fmi_items |> filter(mindfulness_experience == 1),
                                      estimator = "WLSMV",
                                      sample.cov = polychoric_rho,
                                      ordered = TRUE)

cfa_results[["FMI-14, ordered, polychoric, mindfulness practitioners"]] <- 
  get_results_list(one_factor_ordered_polychoric_practitioners,
                   model_name = "FMI-14, ordered, polychoric, mindfulness practitioners")
  
```


## Two factors (presence, acceptance) without item 13, correlated factors

```{r FMI13R}
FMI13R <- "
# Presence:
presence =~ i1 + i2 + i3 + i5 + i7 + i10 

acceptance =~ i4 + i6 + i8 + i9 + i11 + i12 + i14

presence ~~ acceptance
"
```







### items as numeric

```{r cfa-results-numeric}
two_factors_numeric <- cfa(FMI13R,
                           data = fmi_items)

cfa_results[["FMI-13R, numeric"]] <-
  get_results_list(two_factors_numeric,
                   model_name = "FMI-13R, numeric")
```


### items as categorical, Pearson

```{r cfa_model_two_dim_wo_13_ordered}
model_two_dim_wo_13_ordered <- cfa(FMI13R,
                                   data = fmi_items,
                                   estimator = "WLSMV",
                                   ordered = TRUE)


cfa_results[["FMI-13R, ordered, Pearson"]] <-
  get_results_list(model_two_dim_wo_13_ordered,
                   model_name = "FMI-13R, ordered, Pearson")
```

### items as categorical, Polychoric

```{r model_two_dim_wo_13_ordered_poly}
model_two_dim_wo_13_ordered_poly<- cfa(FMI13R,
                                   data = fmi_items,
                                   estimator = "WLSMV",
                                   sample.cov = polychoric_rho,
                                   ordered = TRUE)


cfa_results[["FMI-13R, ordered, polychoric"]] <-
  get_results_list(model_two_dim_wo_13_ordered_poly,
                   "FMI-13R, ordered, polychoric")
```


### Plot


```{r semplot1}
semPaths(model_two_dim_wo_13_ordered_poly,
         what = "path",
         whatLabels = "stand",
         layout = "circle",
        # sizeMan = 3,
         #style = "lisrel",
         residuals = FALSE,
         #fixed = FALSE,
         intercepts = FALSE,
         normalize = FALSE,
         thresholds = F,
         width = 12,
         height = 6,
        # rotation = 2,
        # intAtSide = TRUE,
       #  nCharNodes = 0
)
title("Two factors, ordered, polychoric")
```

Standardized parameters are shown (loadings, correlations).



## Two correlated factors, individuals with meditation practice only

### items as numeric

```{r model_two_dim_wo_13_meditators_only}
model_two_dim_wo_13_meditators_only <- 
  cfa(FMI13R,
      data = fmi_items |> filter(mindfulness_experience == 1))


cfa_results[["FMI-13R, numeric, mindfulness practitioners"]] <-
  get_results_list(model_two_dim_wo_13_meditators_only,
                   model_name = "FMI-13R, numeric, mindfulness practitioners")
```






### items as categorical, Pearson

```{r model_two_dim_wo_13_meditators_only_categorical}
model_two_dim_wo_13_meditators_only_categorical <- 
  cfa(FMI13R,
      estimator = "WLSMV",
      ordered = TRUE,
      data = fmi_items |> filter(mindfulness_experience == 1))

cfa_results[["FMI-13R, ordered, Pearson, mindfulness practitioners"]] <-
  get_results_list(model_two_dim_wo_13_meditators_only_categorical,
                   model_name = "FMI-13R, ordered, Pearson, mindfulness practitioners")
```




### items as categorical, polychoric

```{r model_two_dim_wo_13_meditators_only_categorical_polychoric}
model_two_dim_wo_13_meditators_only_categorical_poly <- 
  cfa(FMI13R,
      estimator = "WLSMV",
      ordered = TRUE,
      data = fmi_items |> filter(mindfulness_experience == 1))

cfa_results[["FMI-13R, ordered, polychoric, mindfulness practitioners"]] <-
  get_results_list(model_two_dim_wo_13_meditators_only_categorical_poly,
                   model_name = "FMI-13R, ordered, polychoric, mindfulness practitioners")
```


## Results

```{r cfa-results}
cfa_results_df <-
  do.call(rbind, lapply(cfa_results, as.data.frame))

cfa_results_prepped <- 
cfa_results_df |> 
  select(-obj_name) |> 
  rename(Model = model_name,
         CFI = cfi,
         TLI = tli,
         RMSEA = rmsea,
         SRMR = srmr) |> 
  filter(!str_detect(Model, "Pearson")) |> 
  mutate(Model = str_replace_all(Model, ", polychoric", "")) |> 
  mutate(Model = str_replace_all(Model, "mindfulness ", "")) |> 
  mutate(Nr = row_number()) |> 
  relocate(Nr, .before = everything()) |> 
  select(Nr, Model, chisq, df, pvalue, CFI, TLI, RMSEA, SRMR)



cfa_results_prepped |> 
  names() <- c("Nr", "Model", "MLR χ²", "df", "p-value", "CFI", "TLI", "RMSEA", "SRMR")

  
  cfa_results_prepped |> 
  kable(digits = 2, 
        row.names = FALSE,
        align = c("l", "l",
                rep("r", ncol(cfa_results_prepped) - 2)))
```



In sum, the results favor model 10 *FMI-13R, ordered, polychoric, mindfulness practitioners*, which show very good fit.
However, for the whole sample, model *FMI-13R, ordered, polychoric* is of similar good fit.














# Multi-group Confirmatory Factor Analysis (MG-CFA)


## Simple multigroup

### FMI-13R, numeric

```{r mgcfa1_num}
cfa_med_non_med_fmi13_numeric <- 
  cfa(model = FMI13R,
      data = fmi_items,
      group = "mindfulness_experience")

summary(cfa_med_non_med_fmi13_numeric, fit.measures= TRUE, standardized = TRUE)
fitMeasures(cfa_med_non_med_fmi13_numeric)
```


### FMI-13R, ordered, polychoric


```{r mgcfa1_ordered}
cfa_med_non_med_fmi13_ordered <- 
  cfa(model = FMI13R,
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE,
      std.lv = TRUE,
      group = "mindfulness_experience")

summary(cfa_med_non_med_fmi13_ordered, fit.measures= TRUE, standardized = TRUE)
fitMeasures(cfa_med_non_med_fmi13_ordered)
```



## Constraining the latent correlation to be equal


```{r def-FMI13R_cor_constrained}
FMI13R_cor_constrained <- "
# Presence:
presence =~ i1 + i2 + i3 + i5 + i7 + i10 

acceptance =~ i4 + i6 + i8 + i9 + i11 + i12 + i14

presence ~~ c(cor1, cor2)*acceptance
"
```



### FMI-13R, numeric



```{r mgcfa2}
cfa_med_non_med_cor_constrained_numeric <- 
  cfa(model = FMI13R_cor_constrained,
      data = fmi_items,
      group = "mindfulness_experience",
      std.lv = TRUE
      )

summary(cfa_med_non_med_cor_constrained_numeric, fit.measures= TRUE, standardized = TRUE)
fitMeasures(cfa_med_non_med_cor_constrained_numeric)
```



```{r cfa_med_non_med_cor_constrained_numeric2}
cfa_med_non_med_cor_constrained_numeric2 <- 
  cfa(model = FMI13R,
      data = fmi_items,
      group = "mindfulness_experience",
      std.lv = TRUE,
      group.equal = c("lv.covariances")
      )

summary(cfa_med_non_med_cor_constrained_numeric2, fit.measures= TRUE, standardized = TRUE)
fitMeasures(cfa_med_non_med_cor_constrained_numeric2)
```


### FMI-13R, ordered



```{r cfa_med_non_med_cor_constrained_ordered}
cfa_med_non_med_cor_constrained_ordered <- 
  cfa(model = FMI13R,
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE,
      group = "mindfulness_experience",
      std.lv = TRUE,
      group.equal = c("lv.covariances")
      )

summary(cfa_med_non_med_cor_constrained_ordered, fit.measures= TRUE, standardized = TRUE)
fitMeasures(cfa_med_non_med_cor_constrained_ordered)
```


## Tests between MG-CFA models


### ANOVA/Likelihood Ratio Test 

*Lower* chi square indicates better model fit.

#### Numeric

```{r anova-numeric}
anova(cfa_med_non_med_fmi13_numeric,
      cfa_med_non_med_cor_constrained_numeric2) |> 
  kable(digits = 2)
```


As the p-value is significant at the 5% level,
we reject the H0 that the simpler model fits the data as well as the more complex model.
Here, the more complex (unconstrained) models leads to a statistically significant improvement in model fit.
We should prefer the more complex model.
However, due to the sensititivity 


#### Ordered

```{r anova-ordered}
anova(cfa_med_non_med_fmi13_ordered,
      cfa_med_non_med_cor_constrained_ordered)  |> 
  kable(digits = 2)
```



### Differences in Fit indices

Change in *CFI* (Comparative Fit Index): A change (decrease) in CFI of ≤0.01 is often considered indicative of a non-significant difference. Some researchers use a more conservative cutoff of ≤0.005.

Change in *RMSEA* (Root Mean Square Error of Approximation): An increase in RMSEA of ≤0.015 is often considered acceptable. Some use a more conservative cutoff of ≤0.010.


Change in *SRMR* (Standardized Root Mean Square Residual): Similar to RMSEA, a small increase in SRMR (e.g., ≤0.01 or ≤0.02) might suggest that the more constrained model has not worsened the fit substantially.

```{r diff-fit-indices}
delta_fit <- function(model1, model2, measures = c("cfi", "tli", "rmsea", "srmr")) {
  
  out <- list()
  for (measure in measures) {
    out[[measure]] <- fitMeasures(model1, measure) - fitMeasures(model2, measure)
  }

  return(out)
} 
  
```


#### Numeric

```{r fit-diff-num}
fit_deltas_numeric <- delta_fit(
  cfa_med_non_med_fmi13_numeric,
  cfa_med_non_med_cor_constrained_numeric2)

fit_deltas_numeric
```


#### Ordered


```{r fit-diff-ordered}
fit_deltas_ordered <- 
  delta_fit(
    cfa_med_non_med_fmi13_ordered,
    cfa_med_non_med_cor_constrained_ordered)

fit_deltas_ordered
```



### Results

```{r}
fit_deltas_lists <- 
  list(numeric = fit_deltas_numeric,
            ordered = fit_deltas_ordered)

fit_deltas_df <-
  bind_rows(fit_deltas_lists,
            .id = "type") |> 
  mutate(across(where(is.numeric), as.numeric))

fit_deltas_df  |> 
  kable(digits = 3) 
```



# Measurement invariance tests 

## Configural model

The configural model tests whether the same factor structure holds across groups without imposing equality constraints.

`cfa_med_non_med_fmi13_ordered`

```{r}
cfa_med_non_med_fmi13_ordered <- 
  cfa(model = FMI13R,
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE,
      std.lv = TRUE,
      parameterization = "theta",
      group = "mindfulness_experience")

summary(cfa_med_non_med_fmi13_ordered, 
        fit.measures= TRUE, 
        standardized = TRUE)
fitMeasures(cfa_med_non_med_fmi13_ordered)
```

## Weak invarance (metric invariance)


Metric invariance constrains factor loadings to be equal across groups. This tests whether the construct has the same meaning across groups.



```{r cfa_med_non_med_cor_constrained_ordered_loadings}
cfa_med_non_med_cor_constrained_ordered_loadings <- 
  cfa(model = FMI13R,
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE,
      group = "mindfulness_experience",
      std.lv = TRUE,
      parameterization = "theta",
      group.equal = c("loadings")
      )

summary(cfa_med_non_med_cor_constrained_ordered_loadings, 
        fit.measures= TRUE, 
        standardized = TRUE)
fitMeasures(cfa_med_non_med_cor_constrained_ordered_loadings)
```



## Strong invariance (scalar invariance)

Scalar invariance adds constraints on item thresholds (for categorical data) across groups, testing whether group comparisons of latent means are meaningful.


```{r cfa_med_non_med_cor_constrained_ordered_loadings_thresholds}
cfa_med_non_med_cor_constrained_ordered_loadings_thresholds <- 
  cfa(model = FMI13R,
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE,
      group = "mindfulness_experience",
      std.lv = TRUE,
      parameterization = "theta",
      group.equal = c("loadings", "thresholds")
      )

summary(cfa_med_non_med_cor_constrained_ordered_loadings_thresholds, 
        fit.measures= TRUE, 
        standardized = FALSE)
fitMeasures(cfa_med_non_med_cor_constrained_ordered_loadings_thresholds)
```


## Strict invariance


```{r cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals}
cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals <- 
  cfa(model = FMI13R,
      data = fmi_items,
      estimator = "WLSMV",
      sample.cov = polychoric_rho,
      ordered = TRUE,
      group = "mindfulness_experience",
      std.lv = TRUE,
      parameterization = "theta",
      group.equal = c("loadings", "thresholds", "residuals")
      )

summary(cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals, 
        fit.measures= TRUE, 
        standardized = FALSE)
fitMeasures(cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals)
```


## Comparison of models

### LR Tests

```{r invariance_analysis_results_anova}
invariance_analysis_results_anova <- 
anova(
  cfa_med_non_med_fmi13_ordered,
  cfa_med_non_med_cor_constrained_ordered_loadings,
  cfa_med_non_med_cor_constrained_ordered_loadings_thresholds,
  cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals) |>
  rownames_to_column() |> 
  as_tibble() |> 
  mutate(Invariance = c("Configural", "Weak", "Strong", "Strict")) |> 
  relocate(Invariance, everything()) |> 
  rename(model = rowname)

```


### More fit indices

```{r invariance_analysis_results_fit_measures}
invariance_analysis_results_fit_measures <-
  list(
    cfa_med_non_med_fmi13_ordered = 
      get_results_list(cfa_med_non_med_fmi13_ordered, "cfa_med_non_med_fmi13_ordered"),
    
       cfa_med_non_med_cor_constrained_ordered_loadings = 
      get_results_list(cfa_med_non_med_cor_constrained_ordered_loadings, "cfa_med_non_med_cor_constrained_ordered_loadings"),
    
       cfa_med_non_med_cor_constrained_ordered_loadings_thresholds =
      get_results_list(cfa_med_non_med_cor_constrained_ordered_loadings_thresholds, "cfa_med_non_med_cor_constrained_ordered_loadings_thresholds"),
    
       cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals =
      get_results_list(cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals, "cfa_med_non_med_cor_constrained_ordered_loadings_thresholds_residuals")
      )


invariance_analysis_results_fit_measures_df <-
  bind_rows(invariance_analysis_results_fit_measures,
            .id = "type") |> 
  mutate(across(where(is.numeric), as.numeric)) |> 
  mutate(Invariance = c("Configural", "Weak", "Strong", "Strict")) |> 
  relocate(Invariance, everything()) |> 
  rownames_to_column() |> 
  rename(model = rowname)

# invariance_analysis_results_fit_measures_df  |> 
#   select(-c(type, obj_name)) |> 
#   kable()
```



### Joint table


```{r joint-table-invariance-analysis}
invariance_analysis_results_anova_df <- 
invariance_analysis_results_anova |> 
  select(-c(model, AIC, BIC)) |> 
  left_join(invariance_analysis_results_fit_measures_df |> 
              select(-c(chisq, df, pvalue, model, obj_name, type, model_name)),
            by = "Invariance") |> 
  mutate(Invariance = paste0(1:4, ". ", Invariance)) |> 
  mutate(across(where(is.numeric), ~ round(., digits = 2))) |> 
  mutate(`Pr(>Chisq)` = round(`Pr(>Chisq)`, 3)) |> 
  select(Invariance, Chisq, Df, everything()) |> 
  mutate_all(function(x) ifelse(is.na(x), "-", x))
  
invariance_analysis_results_anova_df |> 
  names() <- c("Invariance", "MLR χ²","df", "ΔMLR χ²", "Δdf", "p-value", "CFI", "TLI", "RMSEA", "SRMR") 
  
  
invariance_analysis_results_anova_df |> 
kable(align = c("l", 
                rep("r", ncol(invariance_analysis_results_anova_df) - 1)))
#  mutate_at(vars(Chisq, `Chisq diff`, cfi, tli, rmsea, srmr), ~ round(., 2))
  
```












# Norm values for different subgroups


The following subgroup variables were considered:

```{r}
subgroup_vars <- c("Geschlecht", "Achts_regel", "Retreats", "Vip_regel", "age_below_md")
subgroup_vars
```



## Split by sex

```{r}
d_w_items_two_sexes <- 
d_w_items |> 
  mutate(Geschlecht = as.character(Geschlecht)) %>% 
  filter(!Geschlecht == "other")
```



### Stats

```{r}
d_w_items_two_sexes %>% 
  #filter(Geschlecht %in% c("männlich", "weiblich")) %>% 
  describe_fmi_stats(
                     var = Geschlecht)
```


Plot:

```{r}
#undebug(plot_fmi_descriptives)
d_w_items_two_sexes |> 
  plot_fmi_descriptives(var = Geschlecht) 
```


### Norms

```{r norms-sex, results = "asis"}
col_names <- c("Mean", "Percent (empirical)", "z", "Stanine", "T", "Percent (normal)")

for (i in unique(d_w_items_two_sexes$Geschlecht)) { 
  cat("Group: ", i, "\n")
  cat("\n")
  d_w_items_two_sexes %>% 
    filter(Geschlecht == i) %>% 
    select(ends_with("_mean")) %>% 
    map(~ knitr::kable(compute_all_norms(., min_score = 0, max_score = 3, by = .1), 
                       digits = 2, col.names = col_names))  %>% print()
}
```


<!-- ### Stanine -->

<!-- ```{r} -->
<!-- d_w_items_two_sexes |>  -->
<!--   select(ends_with("_mean")) |>  -->
<!--   map(~ compute_stanine(.)) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- d_w_items_two_sexes$fmi13_mean |>  -->
<!--   compute_stanine() -->
<!-- ``` -->



## Split by continuous mindfulness training

### Stats


```{r}
describe_fmi_stats(data = d_w_items_two_sexes,
                   var = Achts_regel)
```





```{r}
plot_fmi_descriptives(data = d_w_items_two_sexes,
                      var = Achts_regel)
```



### Norms

```{r norms-training, results = "asis"}
col_names <- c("Mean", "Percent (empirical)", "z", "Stanine", "T", "Percent (normal)")

for (i in unique(d_w_items_two_sexes$Achts_regel)) { 
  cat("Group: ", i, "\n")
  d_w_items_two_sexes %>% 
    filter(Achts_regel == i) %>% 
    select(ends_with("_mean")) %>% 
    map(~ knitr::kable(compute_all_norms(., min_score = 0, max_score = 3, by = .1), 
                       digits = 2, col.names = col_names)) %>% print()
}
```






## Split by retreats


### Stats

```{r}
describe_fmi_stats(data = d_w_items_two_sexes,
                   var = Retreats)
```



```{r}
plot_fmi_descriptives(data = d_w_items_two_sexes,
                      var = Retreats)
```


### Norms


```{r norms-retreats, results = "asis"}
for (i in unique(d_w_items_two_sexes$Retreats)) { 
  cat("Group: ", i, "\n")
  d_w_items_two_sexes %>% 
    filter(Retreats == i) %>% 
    select(ends_with("_mean")) %>% 
    map(~ knitr::kable(compute_all_norms(., min_score = 0, max_score = 3, by = .1), 
                       digits = 2, col.names = col_names)) %>% 
    print()
}
```





## Split by Vipassana continuously

### Stats


```{r}
describe_fmi_stats(data = d_w_items_two_sexes,
                   var = Vip_regel)
```



```{r}
plot_fmi_descriptives(data = d_w_items_two_sexes,
                      var = Vip_regel)
```


### Norms

```{r norms-vip, results = "asis"}
for (i in unique(d_w_items_two_sexes$Vip_regel)) { 
  cat("Group: ", i, "\n")
  d_w_items_two_sexes %>% 
    filter(Vip_regel == i) %>% 
    select(ends_with("_mean")) %>% 
    map(~ knitr::kable(compute_all_norms(., min_score = 0, max_score = 3, by = .1), 
                       digits = 2, col.names = col_names)) %>% 
    print()
}
```






## Split by Age

### Stats

Median age in sample?

```{r}
d_w_items_two_sexes$Alter %>% median()

d_w_items_two_sexes <-
  d_w_items_two_sexes %>%
  mutate(age_below_md = if_else(Alter < median(Alter), "young", "old"))
```



```{r describe-fmi-stats}
describe_fmi_stats(data = d_w_items_two_sexes,
                   var = age_below_md)
```






```{r plot-fmi-desc}
plot_fmi_descriptives(data = d_w_items_two_sexes,
                      var = age_below_md) +
  labs(caption = "Age is splitted at the median FMI score.")
```

### Norms

```{r norms-age, results = "asis"}

for (i in unique(d_w_items_two_sexes$age_below_md)) { 
  cat("Group: ", i, "\n")
  d_w_items_two_sexes %>% 
    filter(age_below_md == i) %>% 
    select(ends_with("_mean")) %>% 
    map(~ knitr::kable(compute_all_norms(., min_score = 0, max_score = 3, by = .1), 
                       digits = 2, col.names = col_names)) %>% 
    print()
}
```







# Overview on descriptive statistics per subgroup




```{r subgroup-desc-stats}
subgroup_stats <- list()

for (i in seq_along(subgroup_vars)){

subgroup_stats[[i]] <- 
  d_w_items_two_sexes %>% 
  select(ends_with("_mean"),
         any_of(subgroup_vars)[i]) %>% 
  group_by(across(any_of(subgroup_vars[i]))) %>% 
    describe_distribution() %>% 
  select(Variable, Mean, SD, IQR, Min, Max, n)

subgroup_stats[[i]][["subgroup_var"]] <- subgroup_vars[i]
}

subgroup_stats_df <- do.call(rbind, subgroup_stats)

# subgroup_stats_df <-
#   subgroup_stats_df %>%
#   mutate(group = str_remove(.group, "^.+=")) %>%
#   select(-.group)

display(subgroup_stats_df)
```



```{r}
subgroup_stats_long <- 
subgroup_stats_df %>% 
  select(Variable, Mean, SD, Subgroup = subgroup_var) %>% 
  mutate(Subscale = str_remove(Variable, "_mean")) %>% 
  pivot_longer(-c(Variable, Mean, Subscale, Subgroup), 
               values_to = "SD")

display(subgroup_stats_long)

# subgroup_stats_long %>% 
#   ggplot(aes(x = Variable, color = group)) +
#   geom_errorbar(aes(ymin = Mean-SD, ymax = Mean+SD), position = "dodge") +
#   geom_point2(aes(y = Mean), alpha = .7, size = 2) +
#   facet_wrap(subgroup_vars ~ Variable, scales = "free")
```


## Regression models



### m1

```{r m1}
#| eval: false
m1 <- lm(phq_sum ~ presence_mean + acceptance13_mean, data = d_w_items_two_sexes)
parameters(m1) %>% display()

performance(m1) %>% display
summary(m1)
```

Standardized data:

```{r m1-params}
#| eval: false
parameters(m1, standardize = "refit") %>% display
```




# Session info

```{r session-info}
sessionInfo()
```

